## Interface ##

To run this Interpreter use the below commands

## Commands ##
---------------------------------------------------------------------------------
bard.py <command line arguments>

No Arguments Given
	This will open the Interpreter Mode.
	
/d		
	This will enable the debugger processes to show on screen.
	
/l <filename>
	This will enable the output to be logged to a file.
	
/i
	This will enable the IDE to put loaded.
	
<filename>
	This will run the file listed 


## Interpreter Commands ##
---------------------------------------------------------------------------------

LIST		Lists the Code Buffer.
SAVE		Saves the Code Buffer to a file.
LOAD		Loads the Code Buffer from a file.
EXIT or E	Exits the Interpreter.
QUIT or Q	Exits the Interpreter.
HELP or ?	Provides help on a given command or all commands.
DEL			Deletes a specific line from the Code Buffer or Clears the buffer if no line supplied.
RUN			Runs the Code Buffer at any given line or from the start if none supplied.
COMPILE		Not yet Built to build a file into a C program and then use GCC to compile an Executable.
IDE			Opens the IDE from the Interpreter.
DIR			Displays a list of files in the working directory for *.2b extension.

## Debugging Commands ##
---------------------------------------------------------------------------------
LIST		Lists the Code Buffer.
B			Set Breakpoints. 
D			Delete Breakpoints.	
>>			Goto Next Breakpoint.
<<			Goto Previous Breakpoint.
>			Advance 1 Line of Code.
<			Retreat 1 Line of Code.
Q			Quit Debugger.
*			Denotes Breakpoint when listing Code Buffer.

## Language Keywords ##
---------------------------------------------------------------------------------
TRUE	True Statement
FALSE	False Statement
IF		If Statement
ELSE	ElseIf or Else
GET		Input
PUT		Print to screen
LOOP	Loop (For or While)
FILE	Open File
WEB		Get File from Web Site
NET		TCP/IP Network Connection
MAIL	Send Email
SFTP	Transfer File
DATE	Date and Time
RTN		Return
CASE 	STRING Case (Value,Param1)
CAST	Casts a value to an different type ie String -> Int -> Date etc 
IMP		Import modules
TYPE	Type of Object
WAIT	Sleep number of seconds
ASCII 	Return either the Number of a Character or the Character of a Number


## Syntax ##
---------------------------------------------------------------------------------
TRUE	True Statement
FALSE	False Statement
IF		If Statement
ELSE	ElseIf or Else
GET		Input
PUT		Print to screen
LOOP	Loop (For or While)
FILE	Open File
WEB		Get File from Web Site
NET		TCP/IP Network Connection
MAIL	Send Email
SFTP	Transfer File
LEN		Length
DATE	Date
RTN		Return
CASE 	STRING Case (Value,Param1)
IMP		Import modules
TYPE	Type of Object
WAIT	Sleep number of seconds
ASCII 	Return either the Number of a Character or the Character of a Number


## Definition ##
---------------------------------------------------------------------------------
TRUE	True Statement
FALSE	False Statement
IF		If Statement
ELSE	ElseIf or Else
GET		Gets Input from the User
			get("Enter Name: ")	displays the Caption Enter Name: and awaits input from user
PUT		Print to screen
			put("test")			writes the word test to the screen
LOOP	Loop (For or While)
			loop(x,1,10)		For Loop will increment by 1 from 1 to 10 inclusive
			loop(x<10)			While look will increment by 1 until x is no longer less than 10
FILE	Open File
WEB		Get File from Web Site
NET		TCP/IP Network Connection
MAIL	Send Email
SFTP	Transfer File
LEN		Length
DATE	Date
			d=Day(1-31) 			/ m=Month(1-12)		
			D=Weekday(Mon-Sun) 		/ M=Month(Jan-Dec)	
			w=Weekday(0-6)			/ y=Year(xx)
			j=Day of Year (0-365)	/ Y=Year(xxxx)
			W=Week(1-52)			/ p=AM or PM
			h=Hour(1-12)			/ H=Hour(1-24)
			n=Minutes(0-59)			/ s=Seconds(0-59)
STR 	STRING (Value,param1,param2)
NUM		NUMBER (Value,param1)
			Param1 = NUMBER of Decumal Places 
			0 = Integer 
			1+ = Float 
			Negative NUMBERs = Absolute Floats
CAST	
RTN		Return
CASE 	STRING Case (Value,Param1)
IMP		Import modules
TYPE	Type of Object
WAIT	Sleep number of seconds
			wait(5)		pauses for 5 seconds
ASCII 	Return either the Number of a Character or the Character of a Number
			ascii("p")	returns 112
			ascii(112)	returns p

Variable Functions
		variables can be treated to act as Functions by using Parentheses after the Variable Identifier to perform actions:-
		All values returned by the function are as Strings apart from Length and Position.
		Positions start at 1 rather than 0.
		All Variable Types:
			a() 		returns the length of the String as a number = 12
		Strings:
			a="Hello World!"
			a(1) 		returns the Left most characters = "H"
			a(-1)		returns the Right most characters = "!"
			a(2,1)		returns the mid range of characters = "el"
			a("ll") 	returns the start position of the characters entered = 3
			a("j")		returns zero if unable to locate the value = 0
			a("l","a") 	replaces all occurances of the first parameter with the second = "Heaao Worad!"
			
			Regular Expressions:
				a("[A-Z][a-z]{4}")	returns the word "Hello"
		Numbers:
			a=1512.56
			a("0") 		returns any number as a whole integer rounded down	= 1512
			a("000000")	returns the number with padded zeros at the start	= 001512.56
			a("0.000") 	returns the number to 3 decimal places	=	1512.560
			a(",0.00")	returns the number with seperators = 1,512.56
			a("b")		returns the number in Binary	=	10111101000
			a("x")		returns the number in HexiDecimal	=	5e8
		Dates:
			


## Operators ##
---------------------------------------------------------------------------------
=	Assignment
+	Addition
-	Subtraction
*	Multiply
/	Divide
>	Greater Than
<	Less Than
|	Modulus
%	Percentage
^	Power
!	Not
==	Equal To
!=	Not Equal To
+=	Increment by One
-=	Decrement by One
*=	Square
/=	Square Root
&&	And
||	Or

## Punctuation ##
---------------------------------------------------------------------------------
(	LPAREN
)	RPAREN
[	LBRACE
]	RBRACE

## Functions/Methods And Classes ##
---------------------------------------------------------------------------------
$	Function and Method Definition
@	Class Definition

## Ignore ##
---------------------------------------------------------------------------------
#	Comments are ignored by the Interpreter and are only used for notation

